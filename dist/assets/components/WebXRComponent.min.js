/* X_ITE v11.2.0 */
const e=window[Symbol.for("X_ITE.X3D-11.2.0")];(()=>{var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const i=e.Components;var s=t.n(i);const r=e.ScreenLine;var n=t.n(r);const a=e.GeometryContext;var o=t.n(a);const c=e.AlphaMode;var h=t.n(c);const u=e.VertexArray;var l=t.n(u);const d=e.Layer;var m=t.n(d);const f=e.Matrix4;var p=t.n(f);const g=e.Namespace;var x=t.n(g);function w(e){const t=e.getContext();this.browser=e,this.vertexArrayObject=new(l())(t),this.circleVertexBuffer=t.createBuffer(),this.circleGeometryContext=new(o())({renderObject:new(m())(e.getPrivateScene()),alphaMode:h().BLEND,geometryType:1}),this.circleGeometryContext.renderObject.setup();const i=e.getCircle2DOptions().getGeometry().getVertices();this.circleNumVertices=i.length/4,t.bindBuffer(t.ARRAY_BUFFER,this.circleVertexBuffer),t.bufferData(t.ARRAY_BUFFER,i.getValue(),t.STATIC_DRAW),this.diskVertexBuffer=t.createBuffer(),this.diskGeometryContext=new(o())({renderObject:this.circleGeometryContext.renderObject,alphaMode:h().BLEND,geometryType:3});const s=e.getDisk2DOptions().getDiskVertices();this.diskNumVertices=s.length/4,t.bindBuffer(t.ARRAY_BUFFER,this.diskVertexBuffer),t.bufferData(t.ARRAY_BUFFER,s.getValue(),t.STATIC_DRAW)}Object.assign(w.prototype,{display:(()=>{const e=new Float32Array(p().Identity),t=new Float32Array(p().Identity),i=new(p()),s=[];return function(r,n,a,o,c,h,u){const l=this.browser,d=l.getContext(),m=l.getViewport();u.bind(),d.viewport(...m),d.scissor(...m);const f=r*Math.abs(c.origin.z),p=c.xAxis.normalize().multiply(f),g=c.yAxis.normalize().multiply(f),x=c.zAxis.normalize().multiply(f);i.set(...p,0,...g,0,...x,0,...c.origin,1),e.set(h),t.set(i),d.depthMask(!1),d.disable(d.DEPTH_TEST),d.enable(d.BLEND),d.disable(d.CULL_FACE);{const i=l.getDefaultMaterial().getShader(this.circleGeometryContext);i.enable(d),i.setClipPlanes(d,s),d.uniformMatrix4fv(i.x3d_ProjectionMatrix,!1,e),d.uniformMatrix4fv(i.x3d_ModelViewMatrix,!1,t),d.uniform3f(i.x3d_EmissiveColor,0,0,0),d.uniform1f(i.x3d_Transparency,o),this.vertexArrayObject.enable(i.getProgram())&&i.enableVertexAttribute(d,this.circleVertexBuffer,0,0),d.drawArrays(d.LINES,0,this.circleNumVertices)}{const i=l.getDefaultMaterial().getShader(this.diskGeometryContext);i.enable(d),i.setClipPlanes(d,s),d.uniformMatrix4fv(i.x3d_ProjectionMatrix,!1,e),d.uniformMatrix4fv(i.x3d_ModelViewMatrix,!1,t),d.uniform3f(i.x3d_EmissiveColor,...n),d.uniform1f(i.x3d_Transparency,a),this.vertexArrayObject.enable(i.getProgram())&&i.enableVertexAttribute(d,this.diskVertexBuffer,0,0),d.drawArrays(d.TRIANGLES,0,this.diskNumVertices)}d.depthMask(!0),d.enable(d.DEPTH_TEST),d.disable(d.BLEND)}})(),dispose(){const e=this.browser.getContext();e.deleteBuffer(this.diskVertexBuffer),this.diskVertexArrayObject.dispose(e)}});const b=w,v=x().add("ScreenPoint",b),y=e.ViewVolume;var M=t.n(y);const S=e.Color3;var V=t.n(S);const R=e.Vector3;var C=t.n(R);const A=e.Rotation4;var E=t.n(A);const P=e.Lock;var F=t.n(P);const j=e.ExamineViewer;var B=t.n(j);Object.assign(B().prototype,{gamepads(e){const t=e.find((({axes:e})=>e[2]||e[3]));if(!t)return void(e.action&&(e.action=!1,this.disconnect()));const i=t.buttons[0].pressed,s=t.buttons[1].pressed;e.button0===i&&e.button1===s||(e.button0=i,e.button1=s,this.disconnect());const r=60/this.getBrowser().currentFrameRate;e.action=!0,i?this.zoom(.005*t.axes[3]*r,Math.sign(-t.axes[3])):s?(this.startPan(0,0),this.pan(5*-t.axes[2]*r,5*t.axes[3]*r)):(this.startRotate(0,0),this.rotate(10*-t.axes[2]*r,10*t.axes[3]*r))}});const D=e.X3DFlyViewer;var L=t.n(D);const O=new(C())(300,300,400);Object.assign(L().prototype,{gamepads:function(){const e=new(C());return function(t){const i=t.find((({axes:e})=>e[2]||e[3]));if(!i)return void(this.startTime=Date.now());i.buttons[1].pressed?(e.set(i.axes[2],-i.axes[3],0).multVec(O),this.direction.add(e).divide(2),this.pan()):(e.set(i.axes[2],0,i.axes[3]).multVec(O),this.direction.add(e).divide(2),this.fly())}}()});const _=e.X3DViewer;var X=t.n(_);Object.assign(X().prototype,{gamepads(){}});const T=Symbol(),I=Symbol(),N=Symbol(),k=Symbol(),z=Symbol(),G=Symbol(),H=Symbol(),W=Symbol();function U(){this[H]=[]}Object.assign(U.prototype,{async initXRSession(){return F().acquire(`X3DWebXRContext.session-${this.getId()}`,(async()=>{if(this.getSession()!==window)return;const e=this.getContext(),t=this.getBrowserOption("XRSessionMode").toLowerCase().replaceAll("_","-"),i=(await e.makeXRCompatible(),await navigator.xr.requestSession(t)),s=await i.requestReferenceSpace("local");e.bindFramebuffer(e.FRAMEBUFFER,null),this.cameraEvents().addInterest("updatePose",this),this.finishedEvents().addInterest("updatePointers",this),this.endEvents().addInterest("endFrame",this),i.addEventListener("inputsourceschange",(e=>this.updateInputSources(e))),i.addEventListener("end",(()=>this.stopXRSession())),this[T]=s,this[k]=new Set,this[z]=new(n())(this,4,2,.9),this[G]=new v(this),Object.assign(this[H],{action:!0}),this[N]={cameraSpaceMatrix:new(p()),viewMatrix:new(p()),views:[]},this.updateBaseLayer({},i),this.setSession(i),this.removeHit(this.getHit())}))},stopXRSession(){return F().acquire(`X3DWebXRContext.session-${this.getId()}`,(async()=>{if(this.getSession()!==window){await this.getSession().end().catch(Function.prototype),this.cameraEvents().removeInterest("updatePose",this),this.finishedEvents().removeInterest("updatePointers",this),this.endEvents().removeInterest("endFrame",this),this.setSession(window),this.setDefaultFramebuffer(null);for(const{hit:e}of this[k])this.removeHit(e);this[T]=null,this[I]=null,this[N]=null,this[k]=null,this[z]=null,this[G]=null,this[W]=null}}))},setFramebufferScaleFactor(e){this.updateBaseLayer({framebufferScaleFactor:e})},updateBaseLayer(e={},t=this.getSession()){if(t===window)return;const i=new XRWebGLLayer(t,this.getContext(),Object.assign({antialias:!1,alpha:!0,depth:!1,ignoreDepthValues:!0,framebufferScaleFactor:this.getRenderingProperty("ContentScale")},e));this[I]=i,t.updateRenderState({baseLayer:i}),this.setDefaultFramebuffer(i.framebuffer)},updateInputSources(e){for(const t of e.added)this[k].add(Object.assign(t,{active:!1,matrix:new(p()),inverse:new(p()),hit:Object.assign(this.getHit().copy(),{button:!1,pressed:!1,pulse:!0,poseViewMatrix:new(p()),originalPoint:new(C()),originalNormal:new(C())})})),t.gamepad&&(t.gamepad.hit=t.hit);for(const t of e.removed)this.removeHit(t.hit),this[k].delete(t)},setFrame(e){if(!e)return;this[W]=e;!this.getCanvas().parent().is(this.getSurface())&&this.getCanvas().css(this.getXREmulatorCSS()),this[H].length=0;for(const{active:e,gamepad:t}of this[k])e&&(t.axes.length<4||this[H].push(t));this.getViewer().gamepads(this[H]),this.addBrowserEvent()},getPose(){return this[N]},updatePose(){const e=this[W].getViewerPose(this[T]),t=this[N],i=this.getActiveViewpoint();t.cameraSpaceMatrix.assign(e.transform.matrix),t.viewMatrix.assign(e.transform.inverse.matrix),i&&(t.cameraSpaceMatrix.multRight(i.getCameraSpaceMatrix()),t.viewMatrix.multLeft(i.getViewMatrix()));let s=0;for(const r of e.views){const{x:e,y:n,width:a,height:o}=this[I].getViewport(r);if(!a)continue;this.reshapeFramebuffer(s,0|e,0|n,0|a,0|o);const c=t.views[s]??={projectionMatrix:new(p()),cameraSpaceMatrix:new(p()),viewMatrix:new(p()),matrix:new(p()),inverse:new(p())};c.projectionMatrix.assign(r.projectionMatrix),c.cameraSpaceMatrix.assign(r.transform.matrix),c.viewMatrix.assign(r.transform.inverse.matrix),i&&(c.cameraSpaceMatrix.multRight(i.getCameraSpaceMatrix()),c.viewMatrix.multLeft(i.getViewMatrix())),c.matrix.assign(t.cameraSpaceMatrix).multRight(c.viewMatrix),c.inverse.assign(c.cameraSpaceMatrix).multRight(t.viewMatrix),++s}t.views.length=s,this.getFramebuffers().length=s},updatePointers:function(){const e=new(V())(.5,.75,1),t=new(p()),i=new(C())(0,0,-.5),s=new(C()),r=new(C()),n=new(C()),a=new(E());return function(){const o=this.getViewport().getValue(),c=this[N],h=this.getActiveViewpoint();for(const e of this[k]){const{targetRaySpace:t,matrix:i,inverse:s}=e,r=this[W].getPose(t,this[T]);e.active=!!r,r&&(i.assign(r.transform.matrix),s.assign(r.transform.inverse.matrix),h&&(i.multRight(h.getCameraSpaceMatrix()),s.multLeft(h.getViewMatrix())))}for(const e of this[k]){const{active:i,gamepad:s,matrix:r,hit:n}=e;if(!i)continue;if(this.touch(o[2]/2,o[3]/2,n,e),this.sensorHitPulse(n,s),!n.id)continue;const a=c.views[0].projectionMatrix;n.pressed||n.poseViewMatrix.assign(c.viewMatrix),t.assign(r).multRight(n.poseViewMatrix);for(const e of n.sensors.values())e.projectionMatrix.assign(a),e.modelViewMatrix.multRight(t);M().projectPoint(n.point,t,a,o,n.pointer),n.originalPoint.assign(n.point),n.originalNormal.assign(n.normal),n.ray.multLineMatrix(t),t.multVecMatrix(n.point),t.submatrix.inverse().multMatrixVec(n.normal)}for(const{active:e,gamepad:t,hit:i}of this[k]){if(!e)continue;const s=t?.buttons[0];s?.pressed?i.button||(i.button=!0,i.pressed||=this.buttonPressEvent(0,0,i)):(i.button=!1,i.pressed&&(i.pressed=!1,this.buttonReleaseEvent(i))),this.motionNotifyEvent(0,0,i)}for(const[h,{viewMatrix:u,projectionMatrix:l}]of c.views.entries()){const c=this.getFramebuffers()[h];for(const{active:h,gamepad:d,matrix:m,hit:f}of this[k]){if(!h)continue;const p=d?.buttons.some((e=>e.pressed)),g=p?e:V().White;if(t.assign(m).multRight(u),t.multVecMatrix(s.assign(C().Zero)),t.multVecMatrix(r.assign(i)),t.multVecMatrix(n.assign(f.originalPoint)),n.distance(s)<r.distance(s)&&r.assign(n),s.z>0||r.z>0)continue;if(M().projectPointMatrix(s,l,o,s),M().projectPointMatrix(r,l,o,r),s.z=0,r.z=0,this[z].setColor(g).display(s,r,c),!f.id)continue;const x=p?.005:.007;t.assign(m).multRight(u).translate(f.originalPoint).rotate(a.setFromToVec(C().zAxis,f.originalNormal)),this[G].display(x,g,.3,.8,t,l,c)}}}}(),endFrame(){this.getContext().bindVertexArray(null)},sensorHitPulse(e,t){e.sensors.size?e.pulse&&(t?.hapticActuators?.[0]?.pulse(.25,10),e.pulse=!1):e.pulse=!0}});const q=U,Y=x().add("X3DWebXRContext",q);s().add({name:"WebXR",concreteNodes:[],abstractNodes:[],browserContext:Y});x().add("WebXRComponent",undefined)})();