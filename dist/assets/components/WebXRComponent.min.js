/* X_ITE v11.2.2 */
const e=window[Symbol.for("X_ITE.X3D-11.2.2")];(()=>{var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const i=e.Components;var s=t.n(i);const r=e.ScreenLine;var n=t.n(r);const a=e.GeometryContext;var o=t.n(a);const c=e.AlphaMode;var h=t.n(c);const d=e.VertexArray;var l=t.n(d);const u=e.Layer;var x=t.n(u);const p=e.Matrix4;var m=t.n(p);const f=e.Namespace;var g=t.n(f);function v(e){const t=e.getContext();this.browser=e,this.vertexArrayObject=new(l())(t),this.circleVertexBuffer=t.createBuffer(),this.circleGeometryContext=new(o())({renderObject:new(x())(e.getPrivateScene()),alphaMode:h().BLEND,geometryType:1}),this.circleGeometryContext.renderObject.setup();const i=e.getCircle2DOptions().getGeometry().getVertices();this.circleNumVertices=i.length/4,t.bindBuffer(t.ARRAY_BUFFER,this.circleVertexBuffer),t.bufferData(t.ARRAY_BUFFER,i.getValue(),t.STATIC_DRAW),this.diskVertexBuffer=t.createBuffer(),this.diskGeometryContext=new(o())({renderObject:this.circleGeometryContext.renderObject,alphaMode:h().BLEND,geometryType:3});const s=e.getDisk2DOptions().getDiskVertices();this.diskNumVertices=s.length/4,t.bindBuffer(t.ARRAY_BUFFER,this.diskVertexBuffer),t.bufferData(t.ARRAY_BUFFER,s.getValue(),t.STATIC_DRAW)}Object.assign(v.prototype,{display:(()=>{const e=new Float32Array(m().Identity),t=new Float32Array(m().Identity),i=new Float32Array(m().Identity),s=new(m()),r=[];return function(n,a,o,c,h,d,l){const u=this.browser,x=u.getContext(),p=u.getViewport();l.bind(),x.viewport(...p),x.scissor(...p);const m=n*Math.abs(h.origin.z),f=h.xAxis.normalize().multiply(m),g=h.yAxis.normalize().multiply(m),v=h.zAxis.normalize().multiply(m);s.set(...f,0,...g,0,...v,0,...h.origin,1),e.set(d),t.set(s),x.depthMask(!1),x.disable(x.DEPTH_TEST),x.enable(x.BLEND),x.disable(x.CULL_FACE);{const s=u.getDefaultMaterial().getShader(this.circleGeometryContext);s.enable(x),s.setClipPlanes(x,r),x.uniformMatrix4fv(s.x3d_ProjectionMatrix,!1,e),x.uniformMatrix4fv(s.x3d_ModelViewMatrix,!1,t),x.uniformMatrix4fv(s.x3d_EyeMatrix,!1,i),x.uniform3f(s.x3d_EmissiveColor,0,0,0),x.uniform1f(s.x3d_Transparency,c),this.vertexArrayObject.enable(s.getProgram())&&s.enableVertexAttribute(x,this.circleVertexBuffer,0,0),x.drawArrays(x.LINES,0,this.circleNumVertices)}{const s=u.getDefaultMaterial().getShader(this.diskGeometryContext);s.enable(x),s.setClipPlanes(x,r),x.uniformMatrix4fv(s.x3d_ProjectionMatrix,!1,e),x.uniformMatrix4fv(s.x3d_ModelViewMatrix,!1,t),x.uniformMatrix4fv(s.x3d_EyeMatrix,!1,i),x.uniform3f(s.x3d_EmissiveColor,...a),x.uniform1f(s.x3d_Transparency,o),this.vertexArrayObject.enable(s.getProgram())&&s.enableVertexAttribute(x,this.diskVertexBuffer,0,0),x.drawArrays(x.TRIANGLES,0,this.diskNumVertices)}x.depthMask(!0),x.enable(x.DEPTH_TEST),x.disable(x.BLEND)}})(),dispose(){const e=this.browser.getContext();e.deleteBuffer(this.diskVertexBuffer),this.diskVertexArrayObject.dispose(e)}});const w=v,b=g().add("ScreenPoint",w),y=e.ViewVolume;var M=t.n(y);const S=e.Color3;var R=t.n(S);const V=e.Vector3;var C=t.n(V);const E=e.Rotation4;var P=t.n(E);const A=e.Lock;var F=t.n(A);const j=e.ExamineViewer;var D=t.n(j);Object.assign(D().prototype,{gamepads(e){const t=e.find((({axes:e})=>e[2]||e[3]));if(!t)return void(e.action&&(e.action=!1,this.disconnect()));const i=t.buttons[0].pressed,s=t.buttons[1].pressed;e.button0===i&&e.button1===s||(e.button0=i,e.button1=s,this.disconnect());const r=60/this.getBrowser().currentFrameRate;e.action=!0,i?this.zoom(.005*t.axes[3]*r,Math.sign(-t.axes[3])):s?(this.startPan(0,0),this.pan(5*-t.axes[2]*r,5*t.axes[3]*r)):(this.startRotate(0,0),this.rotate(10*-t.axes[2]*r,10*t.axes[3]*r))}});const B=e.X3DFlyViewer;var _=t.n(B);const N=new(C())(300,300,400);Object.assign(_().prototype,{gamepads:function(){const e=new(C());return function(t){const i=t.find((({axes:e})=>e[2]||e[3]));if(!i)return void(this.startTime=Date.now());const s=i.buttons[0].pressed;i.buttons[1].pressed?(e.set(i.axes[2],-i.axes[3],0).multVec(N),this.direction.add(e).divide(2),this.pan()):(e.set(i.axes[2],0,i.axes[3]).multVec(N).multiply(s?2:1),this.direction.add(e).divide(2),this.fly())}}()});const O=e.X3DViewer;var I=t.n(O);Object.assign(I().prototype,{gamepads(){}});const L=Symbol(),X=Symbol(),U=Symbol(),T=Symbol(),k=Symbol(),z=Symbol(),G=Symbol(),H=Symbol();function W(){this[G]=[]}Object.assign(W.prototype,{getPose(){return this[U]},async initXRSession(){return F().acquire(`X3DWebXRContext.session-${this.getId()}`,(async()=>{if(this.getSession()!==window)return;const e=this.getContext(),t=this.getBrowserOption("XRSessionMode").toLowerCase().replaceAll("_","-"),i=(await e.makeXRCompatible(),await navigator.xr.requestSession(t)),s=await i.requestReferenceSpace("local");e.bindFramebuffer(e.FRAMEBUFFER,null),this.cameraEvents().addInterest("xrUpdatePose",this),this.finishedEvents().addInterest("xrUpdatePointers",this),this.endEvents().addInterest("xrEndFrame",this),i.addEventListener("inputsourceschange",(e=>this.xrUpdateInputSources(e))),i.addEventListener("end",(()=>this.stopXRSession())),this[L]=s,this[T]=new Set,this[k]=new(n())(this,4,2,.9),this[z]=new b(this),Object.assign(this[G],{action:!0}),this[U]={cameraSpaceMatrix:new(m()),viewMatrix:new(m()),views:[]},this.xrUpdateBaseLayer({},i),this.setSession(i),this.removeHit(this.getHit()),this.getRenderingProperties()._ContentScale.addInterest("xrContentScale",this),this.getRenderingProperties()._XRSession=!0}))},stopXRSession(){return F().acquire(`X3DWebXRContext.session-${this.getId()}`,(async()=>{if(this.getSession()!==window){await this.getSession().end().catch(Function.prototype),this.cameraEvents().removeInterest("xrUpdatePose",this),this.finishedEvents().removeInterest("xrUpdatePointers",this),this.endEvents().removeInterest("xrEndFrame",this),this.setSession(window),this.setDefaultFramebuffer(null);for(const{hit:e}of this[T])this.removeHit(e);this[L]=null,this[X]=null,this[U]=null,this[T]=null,this[k]=null,this[z]=null,this[H]=null,this.getRenderingProperties()._ContentScale.removeInterest("xrContentScale",this),this.getRenderingProperties()._XRSession=!1}}))},xrContentScale(){this.xrUpdateBaseLayer()},xrUpdateBaseLayer(e={},t=this.getSession()){if(t===window)return;const i=new XRWebGLLayer(t,this.getContext(),Object.assign({antialias:!1,alpha:!0,depth:!1,ignoreDepthValues:!0,framebufferScaleFactor:this.getRenderingProperty("ContentScale")},e));this[X]=i,t.updateRenderState({baseLayer:i}),this.setDefaultFramebuffer(i.framebuffer)},xrUpdateNearFarPlanes:function(){const e={};return function(){const t=this.getActiveNavigationInfo(),i=this.getActiveViewpoint();i?(e.depthNear=i.getNearDistance(t),e.depthFar=i.getFarDistance(t)):(e.depthNear=.1,e.depthFar=1e4),this.getSession().updateRenderState(e)}}(),xrUpdateInputSources(e){for(const t of e.added)this[T].add(Object.assign(t,{active:!1,matrix:new(m()),inverse:new(m()),hit:Object.assign(this.getHit().copy(),{button:!1,pressed:!1,pulse:!0,poseViewMatrix:new(m()),originalPoint:new(C()),originalNormal:new(C())})})),t.gamepad&&(t.gamepad.hit=t.hit);for(const t of e.removed)this.removeHit(t.hit),this[T].delete(t)},xrFrame(e){if(!e)return;this[H]=e;!this.getCanvas().parent().is(this.getSurface())&&this.getCanvas().css(this.getXREmulatorCSS()),this.xrUpdateNearFarPlanes(),this[G].length=0;for(const{active:e,gamepad:t}of this[T])e&&t&&(t.axes.length<4||this[G].push(t));this.getViewer().gamepads(this[G]),this.addBrowserEvent()},xrUpdatePose(){const e=this[H].getViewerPose(this[L]),t=this[U];t.cameraSpaceMatrix.assign(e.transform.matrix),t.viewMatrix.assign(e.transform.inverse.matrix);let i=0;for(const s of e.views){const{x:e,y:r,width:n,height:a}=this[X].getViewport(s);if(!n)continue;this.reshapeFramebuffer(i,0|e,0|r,0|n,0|a);const o=t.views[i]??={projectionMatrix:new(m()),cameraSpaceMatrix:new(m()),viewMatrix:new(m()),matrix:new(m()),inverse:new(m())};o.projectionMatrix.assign(s.projectionMatrix),o.cameraSpaceMatrix.assign(s.transform.matrix),o.viewMatrix.assign(s.transform.inverse.matrix),o.matrix.assign(t.cameraSpaceMatrix).multRight(o.viewMatrix),o.inverse.assign(o.cameraSpaceMatrix).multRight(t.viewMatrix),++i}t.views.length=i,this.getFramebuffers().length=i},xrUpdatePointers:function(){const e=new(R())(.5,.75,1),t=new(m()),i=new(C())(0,0,-.5),s=new(C()),r=new(C()),n=new(C()),a=new(P());return function(){const o=this.getViewport().getValue(),c=this[U];for(const e of this[T]){const{targetRaySpace:t,matrix:i,inverse:s}=e,r=this[H].getPose(t,this[L]);e.active=!!r,r&&(i.assign(r.transform.matrix),s.assign(r.transform.inverse.matrix))}for(const e of this[T]){const{active:i,gamepad:s,matrix:r,hit:n}=e;if(!i)continue;if(this.touch(o[2]/2,o[3]/2,n,e),this.xrSensorHitPulse(n,s),!n.id)continue;const a=c.views[0].projectionMatrix;n.pressed||n.poseViewMatrix.assign(c.viewMatrix),t.assign(r).multRight(n.poseViewMatrix);for(const e of n.sensors.values())e.projectionMatrix.assign(a),e.modelViewMatrix.multRight(t);M().projectPoint(n.point,t,a,o,n.pointer),n.originalPoint.assign(n.point),n.originalNormal.assign(n.normal),n.ray.multLineMatrix(t),t.multVecMatrix(n.point),t.submatrix.inverse().multMatrixVec(n.normal)}for(const{active:e,gamepad:t,hit:i}of this[T]){if(!e)continue;const s=t?.buttons[0];s?.pressed?i.button||(i.button=!0,i.pressed||=this.buttonPressEvent(0,0,i)):(i.button=!1,i.pressed&&(i.pressed=!1,this.buttonReleaseEvent(i))),this.motionNotifyEvent(0,0,i)}for(const[h,{viewMatrix:d,projectionMatrix:l}]of c.views.entries()){const c=this.getFramebuffers()[h];for(const{active:h,gamepad:u,matrix:x,hit:p}of this[T]){if(!h)continue;const m=u?.buttons.some((e=>e.pressed)),f=m?e:R().White;if(t.assign(x).multRight(d),t.multVecMatrix(s.assign(C().Zero)),t.multVecMatrix(r.assign(i)),t.multVecMatrix(n.assign(p.originalPoint)),p.id&&n.distance(s)<r.distance(s)&&r.assign(n),s.z>0||r.z>0)continue;if(M().projectPointMatrix(s,l,o,s),M().projectPointMatrix(r,l,o,r),s.z=0,r.z=0,this[k].setColor(f).display(s,r,c),!p.id)continue;const g=m?.005:.007;t.assign(x).multRight(d).translate(p.originalPoint).rotate(a.setFromToVec(C().zAxis,p.originalNormal)),this[z].display(g,f,.3,.8,t,l,c)}}}}(),xrEndFrame(){this.getContext().bindVertexArray(null)},xrSensorHitPulse(e,t){e.sensors.size?e.pulse&&(t?.hapticActuators?.[0]?.pulse(.25,10),e.pulse=!1):e.pulse=!0}});const q=W,Y=g().add("X3DWebXRContext",q);s().add({name:"WebXR",concreteNodes:[],abstractNodes:[],browserContext:Y});g().add("WebXRComponent",undefined)})();