/* X_ITE v11.1.1 */
const e=window[Symbol.for("X_ITE.X3D-11.1.1")];(()=>{var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const i=e.Components;var s=t.n(i);const r=e.ScreenLine;var n=t.n(r);const o=e.GeometryContext;var a=t.n(o);const c=e.AlphaMode;var h=t.n(c);const l=e.VertexArray;var u=t.n(l);const f=e.Layer;var d=t.n(f);const m=e.Matrix4;var g=t.n(m);const p=e.Namespace;var x=t.n(p);function w(e){const t=e.getContext();this.browser=e,this.vertexArrayObject=new(u())(t),this.circleVertexBuffer=t.createBuffer(),this.circleGeometryContext=new(a())({renderObject:new(d())(e.getPrivateScene()),alphaMode:h().BLEND,geometryType:1}),this.circleGeometryContext.renderObject.setup();const i=e.getCircle2DOptions().getGeometry().getVertices();this.circleNumVertices=i.length/4,t.bindBuffer(t.ARRAY_BUFFER,this.circleVertexBuffer),t.bufferData(t.ARRAY_BUFFER,i.getValue(),t.STATIC_DRAW),this.diskVertexBuffer=t.createBuffer(),this.diskGeometryContext=new(a())({renderObject:this.circleGeometryContext.renderObject,alphaMode:h().BLEND,geometryType:3});const s=e.getDisk2DOptions().getDiskVertices();this.diskNumVertices=s.length/4,t.bindBuffer(t.ARRAY_BUFFER,this.diskVertexBuffer),t.bufferData(t.ARRAY_BUFFER,s.getValue(),t.STATIC_DRAW)}Object.assign(w.prototype,{display:(()=>{const e=new Float32Array(g().Identity),t=new Float32Array(g().Identity),i=new(g()),s=[];return function(r,n,o,a,c,h,l){const u=this.browser,f=u.getContext(),d=u.getViewport();l.bind(),f.viewport(...d),f.scissor(...d);const m=r*(u.getRenderingProperty("ContentScale")*Math.abs(c.origin.z)),g=c.xAxis.normalize().multiply(m),p=c.yAxis.normalize().multiply(m),x=c.zAxis.normalize().multiply(m);i.set(...g,0,...p,0,...x,0,...c.origin,1),e.set(h),t.set(i),f.depthMask(!1),f.disable(f.DEPTH_TEST),f.enable(f.BLEND),f.disable(f.CULL_FACE);{const i=u.getDefaultMaterial().getShader(this.circleGeometryContext);i.enable(f),i.setClipPlanes(f,s),f.uniformMatrix4fv(i.x3d_ProjectionMatrix,!1,e),f.uniformMatrix4fv(i.x3d_ModelViewMatrix,!1,t),f.uniform3f(i.x3d_EmissiveColor,0,0,0),f.uniform1f(i.x3d_Transparency,a),this.vertexArrayObject.enable(i.getProgram())&&i.enableVertexAttribute(f,this.circleVertexBuffer,0,0),f.drawArrays(f.LINES,0,this.circleNumVertices)}{const i=u.getDefaultMaterial().getShader(this.diskGeometryContext);i.enable(f),i.setClipPlanes(f,s),f.uniformMatrix4fv(i.x3d_ProjectionMatrix,!1,e),f.uniformMatrix4fv(i.x3d_ModelViewMatrix,!1,t),f.uniform3f(i.x3d_EmissiveColor,...n),f.uniform1f(i.x3d_Transparency,o),this.vertexArrayObject.enable(i.getProgram())&&i.enableVertexAttribute(f,this.diskVertexBuffer,0,0),f.drawArrays(f.TRIANGLES,0,this.diskNumVertices)}f.depthMask(!0),f.enable(f.DEPTH_TEST),f.disable(f.BLEND)}})(),dispose(){const e=this.browser.getContext();e.deleteBuffer(this.diskVertexBuffer),this.diskVertexArrayObject.dispose(e)}});const v=w,b=x().add("ScreenPoint",v),y=e.ViewVolume;var M=t.n(y);const S=e.Color3;var R=t.n(S);const V=e.Vector3;var A=t.n(V);const C=e.Rotation4;var E=t.n(C);const F=e.Lock;var B=t.n(F);const P=Symbol(),j=Symbol(),D=Symbol(),_=Symbol(),L=Symbol(),O=Symbol(),T=Symbol();function X(){}Object.assign(X.prototype,{initialize(){this._activeViewpoint.addInterest("setReferenceSpace",this)},async initXRSession(){return B().acquire(`X3DWebXRContext.session-${this.getId()}`,(async()=>{if(this.getSession()!==window)return;const e=this.getContext(),t=this.getBrowserOption("XRSessionMode").toLowerCase().replaceAll("_","-"),i=(await e.makeXRCompatible(),await navigator.xr.requestSession(t)),s=await i.requestReferenceSpace("local");e.bindFramebuffer(e.FRAMEBUFFER,null);const r=new XRWebGLLayer(i,e,{antialias:!1,alpha:!0,depth:!1,ignoreDepthValues:!0});this.finishedEvents().addInterest("finishedFrame",this),this.endEvents().addInterest("endFrame",this),i.updateRenderState({baseLayer:r}),i.addEventListener("inputsourceschange",(e=>this.setInputSources(e))),i.addEventListener("end",(()=>this.stopXRSession())),this[P]=s,this[D]=r,this[_]={cameraSpaceMatrix:new(g()),viewMatrix:new(g()),views:[]},this[L]=new Map,this[O]=new(n())(this,5,3,.9),this[T]=new b(this),this.setSession(i),this.setDefaultFrameBuffer(r.framebuffer),this.setReferenceSpace(),this.removeHit(this.getHit())}))},stopXRSession(){return B().acquire(`X3DWebXRContext.session-${this.getId()}`,(async()=>{if(this.getSession()!==window){await this.getSession().end().catch(Function.prototype),this.finishedEvents().removeInterest("finishedFrame",this),this.endEvents().removeInterest("endFrame",this),this.setSession(window),this.setDefaultFrameBuffer(null);for(const{hit:e}of this[L].values())this.removeHit(e);this[P]=null,this[j]=null,this[D]=null,this[_]=null,this[L]=null,this[O]=null,this[T]=null}}))},setReferenceSpace(){if(!this[P])return;const e=new(A()),t=new(E());this.getActiveViewpoint()?.getViewMatrix().get(e,t);const i=new XRRigidTransform(e,t.getQuaternion());this[j]=this[P].getOffsetReferenceSpace(i)},setInputSources(e){for(const t of e.added)this[L].set(t,{matrix:new(g()),inverse:new(g()),hit:Object.assign(this.getHit().copy(),{pressed:!1,pulse:!0,poseViewMatrix:new(g()),originalPoint:new(A()),originalNormal:new(A())})});for(const t of e.removed)this.removeHit(this[L].get(t).hit),this[L].delete(t)},setFrame:function(){const e=new(g());return function(t){if(!t)return;!this.getCanvas().parent().is(this.getSurface())&&this.getCanvas().css(this.getXREmulatorCSS());const i=this.getViewport().getValue(),s=t.getViewerPose(this[j]),r=this[_];r.cameraSpaceMatrix.assign(s.transform.matrix),r.viewMatrix.assign(s.transform.inverse.matrix);let n=0;for(const e of s.views){const{x:t,y:i,width:s,height:o}=this[D].getViewport(e);if(!s)continue;this.reshapeFrameBuffer(n,0|t,0|i,0|s,0|o);const a=r.views[n]??={projectionMatrix:new(g()),cameraSpaceMatrix:new(g()),viewMatrix:new(g()),matrix:new(g()),inverse:new(g())};a.projectionMatrix.assign(e.projectionMatrix),a.cameraSpaceMatrix.assign(e.transform.matrix),a.viewMatrix.assign(e.transform.inverse.matrix),a.matrix.assign(r.cameraSpaceMatrix).multRight(a.viewMatrix),a.inverse.assign(a.cameraSpaceMatrix).multRight(r.viewMatrix),++n}r.views.length=n,this.getFrameBuffers().length=n;for(const[e,{matrix:i,inverse:s}]of this[L]){const r=e.targetRaySpace,n=t.getPose(r,this[j]);e.active=!!n,n&&(i.assign(n.transform.matrix),s.assign(n.transform.inverse.matrix))}for(const[t,s]of this[L]){if(!t.active)continue;const{hit:n}=s;if(this.touch(i[2]/2,i[3]/2,n,s),this.sensorHitPulse(n,t.gamepad),!n.id)continue;const o=r.views[0].projectionMatrix;n.pressed||n.poseViewMatrix.assign(r.viewMatrix),e.assign(s.matrix).multRight(n.poseViewMatrix);for(const t of n.sensors.values())t.projectionMatrix.assign(o),t.modelViewMatrix.multRight(e);M().projectPoint(n.point,e,o,i,n.pointer),n.originalPoint.assign(n.point),n.originalNormal.assign(n.normal),n.ray.multLineMatrix(e),e.multVecMatrix(n.point),e.submatrix.inverse().multMatrixVec(n.normal)}for(const[{active:e,gamepad:t},{hit:i}]of this[L]){if(!e)continue;const s=t?.buttons[0];s?.pressed?i.pressed||=this.buttonPressEvent(0,0,i):i.pressed&&(i.pressed=!1,this.buttonReleaseEvent(i)),this.motionNotifyEvent(0,0,i)}this.addBrowserEvent()}}(),finishedFrame:function(){const e=new(R())(.5,.75,1),t=new(g()),i=new(A())(0,0,-.5),s=new(A()),r=new(A()),n=new(E());return function(){const o=this.getViewport().getValue(),a=this[_];for(const[c,{viewMatrix:h,projectionMatrix:l}]of a.views.entries()){const a=this.getFrameBuffers()[c];for(const[{active:c,gamepad:u},{matrix:f,hit:d}]of this[L]){if(!c)continue;const m=u?.buttons.some((e=>e.pressed)),g=m?e:R().White;if(t.assign(f).multRight(h),t.multVecMatrix(s.assign(A().Zero)),t.multVecMatrix(r.assign(i)),s.z>0||r.z>0)continue;if(M().projectPointMatrix(s,l,o,s),M().projectPointMatrix(r,l,o,r),s.z=0,r.z=0,this[O].setColor(g).display(s,r,a),!d.id)continue;const p=m?.005:.007;t.assign(f).multRight(h).translate(d.originalPoint).rotate(n.setFromToVec(A().zAxis,d.originalNormal)),this[T].display(p,g,.3,.8,t,l,a)}}}}(),endFrame(){this.getContext().bindVertexArray(null)},getPose(){return this[_]},sensorHitPulse(e,t){e.sensors.size?e.pulse&&(t?.hapticActuators?.[0]?.pulse(.2,10),e.pulse=!1):e.pulse=!0}});const N=X,I=x().add("X3DWebXRContext",N);s().add({name:"WebXR",concreteNodes:[],abstractNodes:[],browserContext:I});x().add("WebXRComponent",undefined)})();