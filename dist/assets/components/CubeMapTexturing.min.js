/* X_ITE v10.0.0 */(()=>{"use strict";var e={823:e=>{e.exports=window[Symbol.for("X_ITE.X3D-10.0.0")].require("lib/jquery")}},t={};function r(i){var n=t[i];if(void 0!==n)return n.exports;var a=t[i]={exports:{}};return e[i](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const e=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Components");var t=r.n(e);const i=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Namespace");var n=r.n(i);const a="\nprecision highp float;precision highp int;precision highp sampler2D;const float M_PI=3.1415926535897932384626433832795;varying vec2 texCoord;uniform sampler2D x3d_PanoramaTexture;uniform int x3d_CurrentFace;vec3 uvToXYZ(const in int face,const in vec2 uv){vec3 xyz;if(face==0)xyz=vec3(1.0,uv.y,uv.x);else if(face==1)xyz=vec3(-1.0,uv.y,-uv.x);else if(face==2)xyz=vec3(uv.x,uv.y,-1.0);else if(face==3)xyz=vec3(-uv.x,uv.y,1.0);else if(face==4)xyz=vec3(uv.y,-1.0,uv.x);else xyz=vec3(-uv.y,1.0,uv.x);return xyz;}vec2 dirToUV(const in vec3 dir){return vec2(0.5+0.5*atan(dir.z,dir.x)/M_PI,1.0-acos(dir.y)/M_PI);}vec3 panoramaToCubeMap(const in int face,const in vec2 texCoord){vec3 scan=uvToXYZ(face,texCoord);vec3 direction=normalize(scan);vec2 src=dirToUV(direction);return texture2D(x3d_PanoramaTexture,src).rgb;}void main(){gl_FragColor=vec4(panoramaToCubeMap(x3d_CurrentFace,texCoord),1.0);}";n().add("Panorama1.fs","x_ite/Browser/CubeMapTexturing/Panorama1.fs",a);const s=a,o="#version 300 es\nprecision highp float;precision highp int;precision highp sampler2D;const float M_PI=3.1415926535897932384626433832795;in vec2 texCoord;out vec4 x3d_FragColor;uniform sampler2D x3d_PanoramaTexture;uniform int x3d_CurrentFace;vec3 uvToXYZ(const in int face,const in vec2 uv){switch(face){case 0:return vec3(1.0,uv.y,uv.x);case 1:return vec3(-1.0,uv.y,-uv.x);case 2:return vec3(uv.x,uv.y,-1.0);case 3:return vec3(-uv.x,uv.y,1.0);case 4:return vec3(uv.y,-1.0,uv.x);default:return vec3(-uv.y,1.0,uv.x);}}vec2 dirToUV(const in vec3 dir){return vec2(0.5+0.5*atan(dir.z,dir.x)/M_PI,1.0-acos(dir.y)/M_PI);}vec3 panoramaToCubeMap(const in int face,const in vec2 texCoord){vec3 scan=uvToXYZ(face,texCoord);vec3 direction=normalize(scan);vec2 src=dirToUV(direction);return texture(x3d_PanoramaTexture,src).rgb;}void main(){x3d_FragColor=vec4(panoramaToCubeMap(x3d_CurrentFace,texCoord),1.0);}";n().add("Panorama2.fs","x_ite/Browser/CubeMapTexturing/Panorama2.fs",o);const u=o,d=Symbol();function h(){}Object.assign(h.prototype,{getPanoramaShader(){return this[d]?this[d]:this[d]=this.createShader("Panorama","FullScreen","data:x-shader/x-fragment,"+["",s,u][this.getContext().getVersion()],[],["x3d_PanoramaTexture","x3d_CurrentFace"])}});const c=h;n().add("X3DCubeMapTexturingContext","x_ite/Browser/CubeMapTexturing/X3DCubeMapTexturingContext",c);const T=c,x=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Fields");var p=r.n(x);const l=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Base/X3DFieldDefinition");var g=r.n(l);const m=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Base/FieldDefinitionArray");var _=r.n(m);const f=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Components/Texturing/X3DSingleTextureNode");var b=r.n(f);const w=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Base/X3DConstants");var E=r.n(w);function v(e){b().call(this,e),this.addType(E().X3DEnvironmentTextureNode);const t=this.getBrowser().getContext();this.target=t.TEXTURE_CUBE_MAP,this.targets=[t.TEXTURE_CUBE_MAP_POSITIVE_Z,t.TEXTURE_CUBE_MAP_NEGATIVE_Z,t.TEXTURE_CUBE_MAP_NEGATIVE_X,t.TEXTURE_CUBE_MAP_POSITIVE_X,t.TEXTURE_CUBE_MAP_POSITIVE_Y,t.TEXTURE_CUBE_MAP_NEGATIVE_Y],this.size=1}Object.assign(Object.setPrototypeOf(v.prototype,b().prototype),{getTarget(){return this.target},getTextureType:()=>4,getTargets(){return this.targets},getSize(){return this.size},setSize(e){this.size=e},clearTexture:(()=>{const e=new Uint8Array([255,255,255,255]);return function(){const t=this.getBrowser().getContext();t.bindTexture(this.getTarget(),this.getTexture());for(const r of this.getTargets())t.texImage2D(r,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,e);this.setSize(1),this.setTransparent(!1),this.updateTextureParameters()}})(),updateTextureParameters(){b().prototype.updateTextureParameters.call(this,this.target,this._textureProperties.getValue(),this.texturePropertiesNode,this.size,this.size,!1,!1,!1)},setShaderUniforms(e,t,r,i=t.x3d_Texture[0]){const n=this.getBrowser().getTextureCubeUnit();e.activeTexture(e.TEXTURE0+n),e.bindTexture(e.TEXTURE_CUBE_MAP,this.getTexture()),e.uniform1i(i.textureCube,n)}}),Object.defineProperties(v,{typeName:{value:"X3DEnvironmentTextureNode",enumerable:!0},componentInfo:{value:Object.freeze({name:"CubeMapTexturing",level:1}),enumerable:!0}});const y=v;n().add("X3DEnvironmentTextureNode","x_ite/Components/CubeMapTexturing/X3DEnvironmentTextureNode",y);const C=y,S=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Base/X3DCast");var M=r.n(S);const R=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Utility/BitSet");var I=r.n(R);function D(e){C.call(this,e),this.addType(E().ComposedCubeMapTexture),this.addChildObjects(E().inputOutput,"update",new(p().SFTime)),e.getSpecificationVersion()<=3.3&&(this.addAlias("front",this._frontTexture),this.addAlias("back",this._backTexture),this.addAlias("left",this._leftTexture),this.addAlias("right",this._rightTexture),this.addAlias("top",this._topTexture),this.addAlias("bottom",this._bottomTexture)),this.textureNodes=[null,null,null,null,null,null],this.textureBits=new(I())}Object.assign(Object.setPrototypeOf(D.prototype,C.prototype),{initialize(){C.prototype.initialize.call(this);const e=this.getBrowser().getContext();this.frameBuffer=e.createFramebuffer(),this.clearTexture(),this._frontTexture.addInterest("set_texture__",this,0),this._backTexture.addInterest("set_texture__",this,1),this._leftTexture.addInterest("set_texture__",this,2),this._rightTexture.addInterest("set_texture__",this,3),this._topTexture.addInterest("set_texture__",this,5),this._bottomTexture.addInterest("set_texture__",this,4),this._update.addInterest("update",this),this.set_texture__(0,this._frontTexture),this.set_texture__(1,this._backTexture),this.set_texture__(2,this._leftTexture),this.set_texture__(3,this._rightTexture),this.set_texture__(4,this._topTexture),this.set_texture__(5,this._bottomTexture)},set_texture__(e,t){let r=this.textureNodes[e];r?.removeInterest(`set_loadState${e}__`,this),r=this.textureNodes[e]=M()(E().X3DTexture2DNode,t),r?.addInterest(`set_loadState${e}__`,this,e,r),this.set_loadState__(e,r)},set_loadState__(e,t){this.setTextureBit(e,t?.checkLoadState()),this._update.addEvent()},setTextureBit(e,t){this.textureBits.set(e,t===E().COMPLETE_STATE)},isComplete(){if(63!=+this.textureBits)return!1;const e=this.textureNodes,t=e[0].getWidth();for(const r of e){if(r.getWidth()!==t)return!1;if(r.getHeight()!==t)return!1}return!0},update(){if(this.isComplete()){const e=this.getBrowser().getContext(),t=this.textureNodes,r=t[0].getWidth();if(r!==this.getSize()){const t=new Uint8Array(r*r*4);e.bindTexture(this.getTarget(),this.getTexture());for(let i=0;i<6;++i)e.texImage2D(this.getTargets()[i],0,e.RGBA,r,r,0,e.RGBA,e.UNSIGNED_BYTE,t);this.setSize(r),this.updateTextureParameters()}e.bindFramebuffer(e.FRAMEBUFFER,this.frameBuffer);for(let i=0;i<6;++i){const n=t[i];if(e.bindTexture(e.TEXTURE_2D,n.getTexture()),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n.getTexture(),0),e.bindTexture(this.getTarget(),this.getTexture()),1===n.getTextureType())e.copyTexSubImage2D(this.getTargets()[i],0,0,0,0,0,r,r);else for(let t=0;t<r;++t)e.copyTexSubImage2D(this.getTargets()[i],0,0,r-t-1,0,t,r,1)}this.setTransparent(t.some((e=>e.isTransparent()))),this.setLinear(t.some((e=>e.isLinear()))),this.updateTextureParameters()}else this.clearTexture()}}),Object.defineProperties(D,{typeName:{value:"ComposedCubeMapTexture",enumerable:!0},componentInfo:{value:Object.freeze({name:"CubeMapTexturing",level:1}),enumerable:!0},containerField:{value:"texture",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.1",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(_())([new(g())(E().inputOutput,"metadata",new(p().SFNode)),new(g())(E().inputOutput,"description",new(p().SFString)),new(g())(E().inputOutput,"frontTexture",new(p().SFNode)),new(g())(E().inputOutput,"backTexture",new(p().SFNode)),new(g())(E().inputOutput,"leftTexture",new(p().SFNode)),new(g())(E().inputOutput,"rightTexture",new(p().SFNode)),new(g())(E().inputOutput,"topTexture",new(p().SFNode)),new(g())(E().inputOutput,"bottomTexture",new(p().SFNode)),new(g())(E().initializeOnly,"textureProperties",new(p().SFNode))]),enumerable:!0}});for(let e=0;e<6;++e)D.prototype[`set_loadState${e}__`]=function(e,t){this.set_loadState__(e,t)};const X=D;n().add("ComposedCubeMapTexture","x_ite/Components/CubeMapTexturing/ComposedCubeMapTexture",X);const O=X,U=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Base/X3DBaseNode");var B=r.n(U);const A=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Rendering/X3DRenderObject");var N=r.n(A);const F=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Rendering/TraverseType");var P=r.n(F);function z(e){B().call(this,e),N().call(this,e),this.renderObject=null}Object.assign(Object.setPrototypeOf(z.prototype,B().prototype),N().prototype,{initialize(){B().prototype.initialize.call(this),N().prototype.initialize.call(this)},isIndependent:()=>!1,setRenderer(e){this.renderObject=e},getLayer(){return this.renderObject.getLayer()},getBackground(){return this.renderObject.getBackground()},getFog(){return this.renderObject.getFog()},getNavigationInfo(){return this.renderObject.getNavigationInfo()},getViewpoint(){return this.renderObject.getViewpoint()},getLightContainer(){return this.renderObject.getLights()[this.lightIndex++]},render(e,t,r){switch(e){case P().COLLISION:case P().SHADOW:N().prototype.render.call(this,e,t,r);break;case P().DISPLAY:this.lightIndex=0,N().prototype.render.call(this,e,t,r);for(const e of this.renderObject.getLights())e.modelViewMatrix.pop()}}});for(const e of Object.keys(z.prototype))Object.defineProperty(z.prototype,e,{enumerable:!1});const L=z;n().add("DependentRenderer","x_ite/Rendering/DependentRenderer",L);const V=L,j=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Rendering/TextureBuffer");var G=r.n(j);const q=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Geometry/Camera");var k=r.n(q);const Y=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Geometry/ViewVolume");var H=r.n(Y);const W=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Numbers/Rotation4");var $=r.n(W);const Z=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Numbers/Vector3");var K=r.n(Z);const J=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Numbers/Vector4");var Q=r.n(J);const ee=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Numbers/Matrix4");var te=r.n(ee);const re=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Algorithm");var ie=r.n(re);function ne(e){C.call(this,e),this.addType(E().GeneratedCubeMapTexture),this.dependentRenderer=new V(e),this.projectionMatrix=new(te()),this.modelMatrix=new(te()),this.viewVolume=new(H())}Object.assign(Object.setPrototypeOf(ne.prototype,C.prototype),{initialize(){C.prototype.initialize.call(this),this._size.addInterest("set_size__",this),this.dependentRenderer.setup(),this.set_size__()},set_size__(){const e=this.getBrowser().getContext(),t=e.getVersion()>=2?this._size.getValue():ie().nextPowerOfTwo(this._size.getValue());if(t>0){const r=new Uint8Array(t*t*4);e.bindTexture(this.getTarget(),this.getTexture());for(const i of this.getTargets())e.texImage2D(i,0,e.RGBA,t,t,0,e.RGBA,e.UNSIGNED_BYTE,r);this.updateTextureParameters(),this.viewport=new(Q())(0,0,t,t),this.frameBuffer=new(G())(this.getBrowser(),t,t),this.setSize(t)}else this.frameBuffer=null,this.setSize(0)},traverse(e,t){"NONE"!==this._update.getValue()&&t.isIndependent()&&this.frameBuffer&&(t.getGeneratedCubeMapTextures().push(this),this.modelMatrix.assign(t.getModelViewMatrix().get()).multRight(t.getCameraSpaceMatrix().get()))},renderTexture:(()=>{const e=[new($())(K().zAxis,new(K())(0,0,-1)),new($())(K().zAxis,new(K())(0,0,1)),new($())(K().zAxis,new(K())(1,0,0)),new($())(K().zAxis,new(K())(-1,0,0)),new($())(K().zAxis,new(K())(0,-1,0)),new($())(K().zAxis,new(K())(0,1,0))],t=[new(K())(-1,-1,1),new(K())(-1,-1,1),new(K())(-1,-1,1),new(K())(-1,-1,1),new(K())(1,1,1),new(K())(1,1,1)],r=new(te());return function(i){this.dependentRenderer.setRenderer(i);const n=this.dependentRenderer,a=this.getBrowser(),s=i.getLayer(),o=a.getContext(),u=n.getBackground(),d=n.getNavigationInfo(),h=n.getViewpoint(),c=a.getHeadlight(),T=d._headlight.getValue(),x=d.getNearValue(),p=d.getFarValue(h),l=k().perspective(ie().radians(90),x,p,1,1,this.projectionMatrix),g=this.frameBuffer.getWidth(),m=this.frameBuffer.getHeight();this.setTransparent(u.isTransparent()),this.frameBuffer.bind(),n.getViewVolumes().push(this.viewVolume.set(l,this.viewport,this.viewport)),n.getProjectionMatrix().pushMatrix(l),o.bindTexture(this.getTarget(),this.getTexture());for(let i=0;i<6;++i)o.clear(o.COLOR_BUFFER_BIT),n.getCameraSpaceMatrix().pushMatrix(this.modelMatrix),n.getCameraSpaceMatrix().rotate(e[i]),n.getCameraSpaceMatrix().scale(t[i]),n.getViewMatrix().pushMatrix(r.assign(n.getCameraSpaceMatrix().get()).inverse()),n.getModelViewMatrix().pushMatrix(r),T&&(c.modelViewMatrix.pushMatrix(r),c.modelViewMatrix.multLeft(h.getCameraSpaceMatrix())),s.traverse(P().DISPLAY,n),T&&c.modelViewMatrix.pop(),n.getModelViewMatrix().pop(),n.getCameraSpaceMatrix().pop(),n.getViewMatrix().pop(),o.bindTexture(this.getTarget(),this.getTexture()),o.copyTexSubImage2D(this.getTargets()[i],0,0,0,0,0,g,m);this.updateTextureParameters(),n.getProjectionMatrix().pop(),n.getViewVolumes().pop(),"NEXT_FRAME_ONLY"===this._update.getValue()&&(this._update="NONE")}})(),setShaderUniforms:(()=>{const e=new Float32Array(16);return function(t,r,i,n){C.prototype.setShaderUniforms.call(this,t,r,i,n),i===this.dependentRenderer&&t.uniformMatrix4fv(r.x3d_ModelViewMatrix,!1,e)}})()}),Object.defineProperties(ne,{typeName:{value:"GeneratedCubeMapTexture",enumerable:!0},componentInfo:{value:Object.freeze({name:"CubeMapTexturing",level:3}),enumerable:!0},containerField:{value:"texture",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.0",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(_())([new(g())(E().inputOutput,"metadata",new(p().SFNode)),new(g())(E().inputOutput,"description",new(p().SFString)),new(g())(E().inputOutput,"update",new(p().SFString)("NONE")),new(g())(E().initializeOnly,"size",new(p().SFInt32)(128)),new(g())(E().initializeOnly,"textureProperties",new(p().SFNode))]),enumerable:!0}});const ae=ne;n().add("GeneratedCubeMapTexture","x_ite/Components/CubeMapTexturing/GeneratedCubeMapTexture",ae);const se=ae,oe=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/Components/Networking/X3DUrlObject");var ue=r.n(oe);const de=window[Symbol.for("X_ITE.X3D-10.0.0")].require("standard/Math/Numbers/Vector2");var he=r.n(de);const ce=window[Symbol.for("X_ITE.X3D-10.0.0")].require("x_ite/DEVELOPMENT");var Te=r.n(ce),xe=r(823);const pe=new Uint8Array([255,255,255,255]);function le(e){C.call(this,e),ue().call(this,e),this.addType(E().ImageCubeMapTexture),this.image=xe("<img></img>"),this.urlStack=new(p().MFString)}Object.assign(Object.setPrototypeOf(le.prototype,C.prototype),ue().prototype,{initialize(){C.prototype.initialize.call(this),ue().prototype.initialize.call(this);const e=this.getBrowser().getContext();e.bindTexture(this.getTarget(),this.getTexture());for(let t=0;t<6;++t)e.texImage2D(this.getTargets()[t],0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,pe);this.image.on("load",this.setImage.bind(this)),this.image.on("abort error",this.setError.bind(this)),this.image.prop("crossOrigin","Anonymous"),this.requestImmediateLoad().catch(Function.prototype)},unloadData(){this.clearTexture()},loadData(){this.urlStack.setValue(this._url),this.loadNext()},loadNext(){if(0===this.urlStack.length)return this.clearTexture(),void this.setLoadState(E().FAILED_STATE);this.URL=new URL(this.urlStack.shift(),this.getExecutionContext().getBaseURL()),this.URL.pathname.match(/\.ktx2?(?:\.gz)?$/)||this.URL.href.match(/^data:image\/ktx2[;,]/)?(this.setLinear(!0),this.getBrowser().getKTXDecoder().then((e=>e.loadKTXFromURL(this.URL,this.getCache()))).then((e=>this.setKTXTexture(e))).catch((e=>this.setError({type:e.message})))):(this.setLinear(!1),"data:"!==this.URL.protocol&&(this.getCache()||this.URL.searchParams.set("_",Date.now())),this.image.attr("src",this.URL.href))},setError(e){"data:"!==this.URL.protocol&&console.warn(`Error loading image '${decodeURI(this.URL.href)}'`,e.type),this.loadNext()},setKTXTexture(e){if(e.target!==this.getTarget())return this.setError({type:"Invalid KTX texture target, must be 'TEXTURE_CUBE_MAP'."});Te()&&"data:"!==this.URL.protocol&&console.info(`Done loading image cube map texture '${decodeURI(this.URL.href)}'.`);try{this.setTexture(e),this.setTransparent(!1),this.setSize(e.baseWidth),this.updateTextureParameters(),this.setLoadState(E().COMPLETE_STATE)}catch(e){this.setError({type:e.message})}},setImage(){Te()&&"data:"!==this.URL.protocol&&console.info(`Done loading image cube map texture '${decodeURI(this.URL.href)}'.`);try{const e=this.getBrowser().getContext(),t=e.createTexture();e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.image[0]),this.imageToCubeMap(t,this.image.prop("width"),this.image.prop("height"),!1),this.setLoadState(E().COMPLETE_STATE)}catch(e){this.setError({type:e.message})}},imageToCubeMap(e,t,r){const i=t/r;Math.abs(i-4/3)<.01&&this.skyBoxToCubeMap(e,t,r),Math.abs(i-2)<.01&&this.panoramaToCubeMap(e,t,r),this.updateTextureParameters()},skyBoxToCubeMap:function(){const e=[new(he())(1,1),new(he())(3,1),new(he())(0,1),new(he())(2,1),new(he())(1,0),new(he())(1,2)];return function(t,r,i){const n=this.getBrowser().getContext(),a=n.createFramebuffer(),s=r/4,o=i/3,u=new Uint8Array(s*o*4);n.bindTexture(this.getTarget(),this.getTexture());for(let e=0;e<6;++e)n.texImage2D(this.getTargets()[e],0,n.RGBA,s,o,0,n.RGBA,n.UNSIGNED_BYTE,null);n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0);let d=!1;n.bindTexture(this.getTarget(),this.getTexture());for(let t=0;t<6;++t)n.copyTexSubImage2D(this.getTargets()[t],0,0,0,e[t].x*s,e[t].y*o,s,o),d||(n.readPixels(e[t].x*s,e[t].y*o,s,o,n.RGBA,n.UNSIGNED_BYTE,u),d=this.isImageTransparent(u));n.deleteFramebuffer(a),n.deleteTexture(t),this.setTransparent(d),this.setSize(s)}}(),panoramaToCubeMap(e,t,r){const i=this.getBrowser(),n=i.getContext(),a=i.getPanoramaShader(),s=n.createFramebuffer(),o=i.getTextureCubeUnit(),u=r/2,d=new Uint8Array(u*u*4);n.bindTexture(n.TEXTURE_2D,e),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.MIRRORED_REPEAT),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.MIRRORED_REPEAT),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR),n.bindTexture(this.getTarget(),this.getTexture());for(let e=0;e<6;++e)n.texImage2D(this.getTargets()[e],0,n.RGBA,u,u,0,n.RGBA,n.UNSIGNED_BYTE,null);n.useProgram(a.getProgram()),n.activeTexture(n.TEXTURE0+o),n.bindTexture(n.TEXTURE_2D,e),n.uniform1i(a.x3d_PanoramaTexture,o),n.bindFramebuffer(n.FRAMEBUFFER,s),n.viewport(0,0,u,u),n.disable(n.DEPTH_TEST),n.enable(n.CULL_FACE),n.frontFace(n.CCW),n.clearColor(0,0,0,0),n.bindVertexArray(i.getFullscreenVertexArrayObject());let h=!1;for(let e=0;e<6;++e)n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,this.getTargets()[e],this.getTexture(),0),n.clear(n.COLOR_BUFFER_BIT),n.uniform1i(a.x3d_CurrentFace,e),n.drawArrays(n.TRIANGLES,0,6),h||(n.readPixels(0,0,u,u,n.RGBA,n.UNSIGNED_BYTE,d),h=this.isImageTransparent(d));n.enable(n.DEPTH_TEST),n.deleteFramebuffer(s),n.deleteTexture(e),i.resetTextureUnits(),this.setTransparent(h),this.setSize(u)},dispose(){ue().prototype.dispose.call(this),C.prototype.dispose.call(this)}}),Object.defineProperties(le,{typeName:{value:"ImageCubeMapTexture",enumerable:!0},componentInfo:{value:Object.freeze({name:"CubeMapTexturing",level:2}),enumerable:!0},containerField:{value:"texture",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.0",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(_())([new(g())(E().inputOutput,"metadata",new(p().SFNode)),new(g())(E().inputOutput,"description",new(p().SFString)),new(g())(E().inputOutput,"load",new(p().SFBool)(!0)),new(g())(E().inputOutput,"url",new(p().MFString)),new(g())(E().inputOutput,"autoRefresh",new(p().SFTime)),new(g())(E().inputOutput,"autoRefreshTimeLimit",new(p().SFTime)(3600)),new(g())(E().initializeOnly,"textureProperties",new(p().SFNode))]),enumerable:!0}});const ge=le;n().add("ImageCubeMapTexture","x_ite/Components/CubeMapTexturing/ImageCubeMapTexture",ge);const me=ge;t().add({name:"CubeMapTexturing",concreteNodes:[O,se,me],abstractNodes:[C],browserContext:T});const _e=void 0;n().add("CubeMapTexturing","assets/components/CubeMapTexturing",_e)})()})();