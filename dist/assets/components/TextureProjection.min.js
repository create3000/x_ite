/* X_ITE v9.6.0 */(()=>{"use strict";var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var r in i)t.o(i,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:i[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const e=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Components");var i=t.n(e);const r=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Fields");var n=t.n(r);const o=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Base/X3DFieldDefinition");var a=t.n(o);const s=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Base/FieldDefinitionArray");var u=t.n(s);const l=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Components/Lighting/X3DLightNode");var h=t.n(l);const c=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Base/X3DConstants");var x=t.n(c);const w=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Base/X3DCast");var m=t.n(w);const d=window[Symbol.for("X_ITE.X3D-9.6.0")].require("standard/Math/Numbers/Vector3");var p=t.n(d);const g=window[Symbol.for("X_ITE.X3D-9.6.0")].require("standard/Math/Numbers/Rotation4");var f=t.n(g);const _=window[Symbol.for("X_ITE.X3D-9.6.0")].require("standard/Math/Numbers/Matrix4");var T=t.n(_);const b=window[Symbol.for("X_ITE.X3D-9.6.0")].require("x_ite/Namespace");var O=t.n(b);function S(t){h().call(this,t),this.addType(x().X3DTextureProjectorNode),this._location.setUnit("length"),this._farDistance.setUnit("length"),this._location.setUnit("length")}Object.assign(Object.setPrototypeOf(S.prototype,h().prototype),{initialize(){h().prototype.initialize.call(this),this._nearDistance.addInterest("set_nearDistance__",this),this._farDistance.addInterest("set_farDistance__",this),this._texture.addInterest("set_texture__",this),this.set_nearDistance__(),this.set_farDistance__(),this.set_texture__()},getLightKey:()=>3,getGlobal(){return this._global.getValue()},getLocation(){return this._location.getValue()},getDirection(){return this._direction.getValue()},getNearDistance(){return this.nearDistance},getNearParameter(){return this.nearParameter},getFarDistance(){return this.farDistance},getFarParameter(){return this.farParameter},getTexture(){return this.textureNode},getBiasMatrix:(()=>{const t=new(T())(.5,0,0,0,0,.5,0,0,0,0,.5,0,.5,.5,.5,1);return function(){return t}})(),straightenHorizon(t){return t.straighten(this._upVector.getValue())},set_nearDistance__(){const t=this._nearDistance.getValue();this.nearDistance=t<0?.125:t,this.nearParameter=t<0?0:-1},set_farDistance__(){const t=this._farDistance.getValue();this.farDistance=t<0?1e5:t,this.farParameter=t<0?1:2},set_texture__(){this.textureNode?.removeInterest("set_aspectRatio__",this),this.textureNode=m()(x().X3DTexture2DNode,this._texture),this.textureNode?.addInterest("set_aspectRatio__",this),this.setEnabled(!!this.textureNode),this.set_aspectRatio__(),this.set_on__()},set_aspectRatio__(){this.textureNode?this._aspectRatio=this.textureNode.getWidth()/this.textureNode.getHeight():this._aspectRatio=1}}),Object.defineProperties(S,{typeName:{value:"X3DTextureProjectorNode",enumerable:!0},componentInfo:{value:Object.freeze({name:"TextureProjection",level:4}),enumerable:!0}});const y=S;O().add("X3DTextureProjectorNode","x_ite/Components/TextureProjection/X3DTextureProjectorNode",y);const F=y,M=window[Symbol.for("X_ITE.X3D-9.6.0")].require("standard/Math/Geometry/Camera");var j=t.n(M);const P=window[Symbol.for("X_ITE.X3D-9.6.0")].require("standard/Math/Utility/MatrixStack");var D=t.n(P);const v=window[Symbol.for("X_ITE.X3D-9.6.0")].require("standard/Utility/ObjectCache");var X=t.n(v);const V=X()(I);function I(){this.projectionMatrix=new(T()),this.modelViewMatrix=new(D())(T()),this.modelMatrix=new(T()),this.invTextureSpaceMatrix=new(T()),this.invTextureSpaceProjectionMatrix=new(T()),this.location=new(p()),this.locationArray=new Float32Array(3),this.direction=new(p()),this.rotation=new(f()),this.matrix=new(T()),this.matrixArray=new Float32Array(16),this.textureMatrix=new(T())}function N(t){F.call(this,t),this.addType(x().TextureProjector),this._fieldOfView.setUnit("angle")}Object.assign(I.prototype,{set(t,e,i){this.browser=t.getBrowser(),this.lightNode=t,this.global=t.getGlobal(),this.modelViewMatrix.pushMatrix(i),this.textureMatrix.set(...t.getTexture().getMatrix())},renderShadowMap(t){},setGlobalVariables(t){const e=this.lightNode,i=t.getCameraSpaceMatrix().get(),r=this.modelMatrix.assign(this.modelViewMatrix.get()).multRight(i),n=this.invTextureSpaceMatrix.assign(this.global?r:T().Identity);this.rotation.setFromToVec(p().zAxis,this.direction.assign(e.getDirection()).negate()),e.straightenHorizon(this.rotation),n.translate(e.getLocation()),n.rotate(this.rotation),n.inverse();const o=e.getTexture().getWidth(),a=e.getTexture().getHeight(),s=e.getNearDistance(),u=e.getFarDistance(),l=e.getFieldOfView();j().perspective(l,s,u,o,a,this.projectionMatrix),this.global||n.multLeft(r.inverse()),this.invTextureSpaceProjectionMatrix.assign(n).multRight(this.projectionMatrix).multRight(e.getBiasMatrix()),this.matrix.assign(i).multRight(this.invTextureSpaceProjectionMatrix).multRight(this.textureMatrix),this.matrixArray.set(this.matrix),this.modelViewMatrix.get().multVecMatrix(this.location.assign(e._location.getValue())),this.locationArray.set(this.location)},setShaderUniforms(t,e,i){const r=e.numTextureProjectors++,n=this.lightNode,o=n.getTexture(),a=this.global?this.textureUnit=this.textureUnit??this.browser.popTexture2DUnit():this.browser.getTexture2DUnit();if(t.activeTexture(t.TEXTURE0+a),t.bindTexture(t.TEXTURE_2D,o.getTexture()),t.uniform1i(e.x3d_TextureProjectorTexture[r],a),e.hasTextureProjector(r,this))return;const s=n.getNearParameter(),u=n.getFarParameter();t.uniform3f(e.x3d_TextureProjectorColor[r],...n.getColor()),t.uniform1f(e.x3d_TextureProjectorIntensity[r],n.getIntensity()),t.uniform3fv(e.x3d_TextureProjectorLocation[r],this.locationArray),t.uniform3f(e.x3d_TextureProjectorParams[r],s,u,o.isLinear()),t.uniformMatrix4fv(e.x3d_TextureProjectorMatrix[r],!1,this.matrixArray)},dispose(){this.browser.pushTexture2DUnit(this.textureUnit),this.modelViewMatrix.clear(),this.textureUnit=void 0,V.push(this)}}),Object.assign(Object.setPrototypeOf(N.prototype,F.prototype),{initialize(){F.prototype.initialize.call(this)},getFieldOfView(){const t=this._fieldOfView.getValue();return t>0&&t<Math.PI?t:Math.PI/4},getLights:()=>V}),Object.defineProperties(N,{typeName:{value:"TextureProjector",enumerable:!0},componentInfo:{value:Object.freeze({name:"TextureProjection",level:2}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"4.0",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(u())([new(a())(x().inputOutput,"metadata",new(n().SFNode)),new(a())(x().inputOutput,"description",new(n().SFString)),new(a())(x().inputOutput,"global",new(n().SFBool)(!0)),new(a())(x().inputOutput,"on",new(n().SFBool)(!0)),new(a())(x().inputOutput,"color",new(n().SFColor)(1,1,1)),new(a())(x().inputOutput,"intensity",new(n().SFFloat)(1)),new(a())(x().inputOutput,"ambientIntensity",new(n().SFFloat)),new(a())(x().inputOutput,"location",new(n().SFVec3f)),new(a())(x().inputOutput,"direction",new(n().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"upVector",new(n().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"fieldOfView",new(n().SFFloat)(.785398)),new(a())(x().inputOutput,"nearDistance",new(n().SFFloat)(-1)),new(a())(x().inputOutput,"farDistance",new(n().SFFloat)(-1)),new(a())(x().outputOnly,"aspectRatio",new(n().SFFloat)),new(a())(x().inputOutput,"texture",new(n().SFNode)),new(a())(x().inputOutput,"shadows",new(n().SFBool)),new(a())(x().inputOutput,"shadowColor",new(n().SFColor)),new(a())(x().inputOutput,"shadowIntensity",new(n().SFFloat)(1)),new(a())(x().inputOutput,"shadowBias",new(n().SFFloat)(.005)),new(a())(x().initializeOnly,"shadowMapSize",new(n().SFInt32)(1024))]),enumerable:!0}});const z=N;O().add("TextureProjector","x_ite/Components/TextureProjection/TextureProjector",z);const U=z,R=X()(E);function E(){this.projectionMatrix=new(T()),this.modelViewMatrix=new(D())(T()),this.modelMatrix=new(T()),this.invTextureSpaceMatrix=new(T()),this.location=new(p()),this.locationArray=new Float32Array(3),this.invTextureSpaceProjectionMatrix=new(T()),this.direction=new(p()),this.rotation=new(f()),this.matrix=new(T()),this.matrixArray=new Float32Array(16),this.textureMatrix=new(T())}function C(t){F.call(this,t),this.addType(x().TextureProjectorParallel),this._fieldOfView.setUnit("length")}Object.assign(E.prototype,{set(t,e,i){this.browser=t.getBrowser(),this.lightNode=t,this.global=t.getGlobal(),this.modelViewMatrix.pushMatrix(i),this.textureMatrix.set(...t.getTexture().getMatrix())},renderShadowMap(t){},setGlobalVariables(t){const e=this.lightNode,i=t.getCameraSpaceMatrix().get(),r=this.modelMatrix.assign(this.modelViewMatrix.get()).multRight(i),n=this.invTextureSpaceMatrix.assign(this.global?r:T().Identity);this.rotation.setFromToVec(p().zAxis,this.direction.assign(e.getDirection()).negate()),e.straightenHorizon(this.rotation),n.translate(e.getLocation()),n.rotate(this.rotation),n.inverse();const o=e.getTexture().getWidth()/e.getTexture().getHeight(),a=e.getMinimumX(),s=e.getMaximumX(),u=e.getMinimumY(),l=e.getMaximumY(),h=e.getSizeX(),c=e.getSizeY(),x=e.getNearDistance(),w=e.getFarDistance();if(o>h/c){const t=(a+s)/2,e=c*o/2;j().ortho(t-e,t+e,u,l,x,w,this.projectionMatrix)}else{const t=(u+l)/2,e=h/o/2;j().ortho(a,s,t-e,t+e,x,w,this.projectionMatrix)}this.global||n.multLeft(r.inverse()),this.invTextureSpaceProjectionMatrix.assign(n).multRight(this.projectionMatrix).multRight(e.getBiasMatrix()),this.matrix.assign(i).multRight(this.invTextureSpaceProjectionMatrix).multRight(this.textureMatrix),this.matrixArray.set(this.matrix),this.modelViewMatrix.get().multVecMatrix(this.location.assign(e._location.getValue())),this.locationArray.set(this.location)},setShaderUniforms(t,e,i){const r=e.numTextureProjectors++,n=this.lightNode,o=n.getTexture(),a=this.global?this.textureUnit=this.textureUnit??this.browser.popTexture2DUnit():this.browser.getTexture2DUnit();if(t.activeTexture(t.TEXTURE0+a),t.bindTexture(t.TEXTURE_2D,o.getTexture()),t.uniform1i(e.x3d_TextureProjectorTexture[r],a),e.hasTextureProjector(r,this))return;const s=n.getNearParameter(),u=n.getFarParameter();t.uniform3f(e.x3d_TextureProjectorColor[r],...n.getColor()),t.uniform1f(e.x3d_TextureProjectorIntensity[r],n.getIntensity()),t.uniform3fv(e.x3d_TextureProjectorLocation[r],this.locationArray),t.uniform3f(e.x3d_TextureProjectorParams[r],s,u,o.isLinear()),t.uniformMatrix4fv(e.x3d_TextureProjectorMatrix[r],!1,this.matrixArray)},dispose(){this.browser.pushTexture2DUnit(this.textureUnit),this.modelViewMatrix.clear(),this.textureUnit=void 0,R.push(this)}}),Object.assign(Object.setPrototypeOf(C.prototype,F.prototype),{initialize(){F.prototype.initialize.call(this),this._fieldOfView.addInterest("set_fieldOfView___",this),this.set_fieldOfView___()},set_fieldOfView___(){const t=this._fieldOfView.length;this.minimumX=t>0?this._fieldOfView[0]:-1,this.minimumY=t>1?this._fieldOfView[1]:-1,this.maximumX=t>2?this._fieldOfView[2]:1,this.maximumY=t>3?this._fieldOfView[3]:1,this.sizeX=this.maximumX-this.minimumX,this.sizeY=this.maximumY-this.minimumY},getMinimumX(){return this.minimumX},getMinimumY(){return this.minimumY},getMaximumX(){return this.maximumX},getMaximumY(){return this.maximumY},getSizeX(){return this.sizeX},getSizeY(){return this.sizeY},getLights:()=>R}),Object.defineProperties(C,{typeName:{value:"TextureProjectorParallel",enumerable:!0},componentInfo:{value:Object.freeze({name:"TextureProjection",level:2}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"4.0",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(u())([new(a())(x().inputOutput,"metadata",new(n().SFNode)),new(a())(x().inputOutput,"description",new(n().SFString)),new(a())(x().inputOutput,"global",new(n().SFBool)(!0)),new(a())(x().inputOutput,"on",new(n().SFBool)(!0)),new(a())(x().inputOutput,"color",new(n().SFColor)(1,1,1)),new(a())(x().inputOutput,"intensity",new(n().SFFloat)(1)),new(a())(x().inputOutput,"ambientIntensity",new(n().SFFloat)),new(a())(x().inputOutput,"location",new(n().SFVec3f)),new(a())(x().inputOutput,"direction",new(n().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"upVector",new(n().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"fieldOfView",new(n().MFFloat)(-1,-1,1,1)),new(a())(x().inputOutput,"nearDistance",new(n().SFFloat)(-1)),new(a())(x().inputOutput,"farDistance",new(n().SFFloat)(-1)),new(a())(x().outputOnly,"aspectRatio",new(n().SFFloat)),new(a())(x().inputOutput,"texture",new(n().SFNode)),new(a())(x().inputOutput,"shadows",new(n().SFBool)),new(a())(x().inputOutput,"shadowColor",new(n().SFColor)),new(a())(x().inputOutput,"shadowIntensity",new(n().SFFloat)(1)),new(a())(x().inputOutput,"shadowBias",new(n().SFFloat)(.005)),new(a())(x().initializeOnly,"shadowMapSize",new(n().SFInt32)(1024))]),enumerable:!0}});const A=C;O().add("TextureProjectorParallel","x_ite/Components/TextureProjection/TextureProjectorParallel",A);const B=A;i().add({name:"TextureProjection",concreteNodes:[U,B],abstractNodes:[F]});const q=void 0;O().add("TextureProjection","assets/components/TextureProjection",q)})();