/* X_ITE v11.2.2 */
const t=window[Symbol.for("X_ITE.X3D-11.2.2")];(()=>{var e={n:t=>{var i=t&&t.__esModule?()=>t.default:()=>t;return e.d(i,{a:i}),i},d:(t,i)=>{for(var r in i)e.o(i,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:i[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const i=t.Components;var r=e.n(i);const n=t.Fields;var a=e.n(n);const o=t.X3DFieldDefinition;var s=e.n(o);const u=t.FieldDefinitionArray;var h=e.n(u);const c=t.X3DNode;var l=e.n(c);const x=t.X3DLightNode;var p=e.n(x);const g=t.X3DConstants;var w=e.n(g);const d=t.X3DCast;var m=e.n(d);const f=t.Vector3;var _=e.n(f);const T=t.Rotation4;var O=e.n(T);const F=t.Matrix4;var S=e.n(F);const M=t.Namespace;var P=e.n(M);function y(t){p().call(this,t),this.addType(w().X3DTextureProjectorNode),this._location.setUnit("length"),this._farDistance.setUnit("length"),this._location.setUnit("length")}Object.assign(Object.setPrototypeOf(y.prototype,p().prototype),{initialize(){p().prototype.initialize.call(this),this._nearDistance.addInterest("set_nearDistance__",this),this._farDistance.addInterest("set_farDistance__",this),this._texture.addInterest("set_texture__",this),this.set_nearDistance__(),this.set_farDistance__(),this.set_texture__()},getLightKey:()=>3,getGlobal(){return this._global.getValue()},getLocation(){return this._location.getValue()},getDirection(){return this._direction.getValue()},getNearDistance(){return this.nearDistance},getNearParameter(){return this.nearParameter},getFarDistance(){return this.farDistance},getFarParameter(){return this.farParameter},getTexture(){return this.textureNode},getBiasMatrix:(()=>{const t=new(S())(.5,0,0,0,0,.5,0,0,0,0,.5,0,.5,.5,.5,1);return function(){return t}})(),straightenHorizon(t){return t.straighten(this._upVector.getValue())},set_nearDistance__(){const t=this._nearDistance.getValue();this.nearDistance=t<0?.125:t,this.nearParameter=t<0?0:-1},set_farDistance__(){const t=this._farDistance.getValue();this.farDistance=t<0?1e5:t,this.farParameter=t<0?1:2},set_texture__(){this.textureNode?.removeInterest("set_aspectRatio__",this),this.textureNode=m()(w().X3DTexture2DNode,this._texture),this.textureNode?.addInterest("set_aspectRatio__",this),this.setEnabled(!!this.textureNode),this.set_aspectRatio__(),this.set_on__()},set_aspectRatio__(){this.textureNode?this._aspectRatio=this.textureNode.getWidth()/this.textureNode.getHeight():this._aspectRatio=1}}),Object.defineProperties(y,l().getStaticProperties("X3DTextureProjectorNode","TextureProjection",4));const j=y,V=P().add("X3DTextureProjectorNode",j),D=t.Camera;var b=e.n(D);const v=t.MatrixStack;var N=e.n(v);const X=t.ObjectCache;var R=e.n(X);const U=R()(z);function z(){this.projectionMatrix=new(S()),this.modelViewMatrix=new(N())(S()),this.modelMatrix=new(S()),this.invTextureSpaceMatrix=new(S()),this.invTextureSpaceProjectionMatrix=new(S()),this.location=new(_()),this.locationArray=new Float32Array(3),this.direction=new(_()),this.rotation=new(O()),this.matrix=new(S()),this.matrixArray=new Float32Array(16),this.textureMatrix=new(S())}function A(t){V.call(this,t),this.addType(w().TextureProjector),this._fieldOfView.setUnit("angle")}Object.assign(z.prototype,{set(t,e,i){this.browser=t.getBrowser(),this.lightNode=t,this.global=t.getGlobal(),this.modelViewMatrix.push(i),this.textureMatrix.assign(t.getTexture().getMatrix())},renderShadowMap(t){const e=this.lightNode,i=t.getCameraSpaceMatrixArray(),r=this.modelMatrix.assign(this.modelViewMatrix.get()).multRight(i),n=this.invTextureSpaceMatrix.assign(this.global?r:S().Identity);this.rotation.setFromToVec(_().zAxis,this.direction.assign(e.getDirection()).negate()),e.straightenHorizon(this.rotation),n.translate(e.getLocation()),n.rotate(this.rotation),n.inverse();const a=e.getTexture().getWidth(),o=e.getTexture().getHeight(),s=e.getNearDistance(),u=e.getFarDistance(),h=e.getFieldOfView();b().perspective(h,s,u,a,o,this.projectionMatrix),this.global||n.multLeft(r.inverse()),this.invTextureSpaceProjectionMatrix.assign(n).multRight(this.projectionMatrix).multRight(e.getBiasMatrix()).multRight(this.textureMatrix),this.modelViewMatrix.get().multVecMatrix(this.location.assign(e._location.getValue())),this.locationArray.set(this.location)},setGlobalVariables(t){this.matrix.assign(t.getView()?.inverse??S().Identity).multRight(t.getCameraSpaceMatrixArray()).multRight(this.invTextureSpaceProjectionMatrix),this.matrixArray.set(this.matrix)},setShaderUniforms(t,e,i){const r=e.numTextureProjectors++,n=this.lightNode,a=n.getTexture(),o=this.global?this.textureUnit=this.textureUnit??this.browser.popTexture2DUnit():this.browser.getTexture2DUnit();if(t.activeTexture(t.TEXTURE0+o),t.bindTexture(t.TEXTURE_2D,a.getTexture()),t.uniform1i(e.x3d_TextureProjectorTexture[r],o),e.hasTextureProjector(r,this))return;const s=n.getNearParameter(),u=n.getFarParameter();t.uniform3f(e.x3d_TextureProjectorColor[r],...n.getColor()),t.uniform1f(e.x3d_TextureProjectorIntensity[r],n.getIntensity()),t.uniform3fv(e.x3d_TextureProjectorLocation[r],this.locationArray),t.uniform3f(e.x3d_TextureProjectorParams[r],s,u,a.isLinear()),t.uniformMatrix4fv(e.x3d_TextureProjectorMatrix[r],!1,this.matrixArray)},dispose(){this.browser.pushTexture2DUnit(this.textureUnit),this.modelViewMatrix.clear(),this.textureUnit=void 0,U.push(this)}}),Object.assign(Object.setPrototypeOf(A.prototype,V.prototype),{initialize(){V.prototype.initialize.call(this)},getFieldOfView(){const t=this._fieldOfView.getValue();return t>0&&t<Math.PI?t:Math.PI/4},getLights:()=>U}),Object.defineProperties(A,{...l().getStaticProperties("TextureProjector","TextureProjection",2,"children","4.0"),fieldDefinitions:{value:new(h())([new(s())(w().inputOutput,"metadata",new(a().SFNode)),new(s())(w().inputOutput,"description",new(a().SFString)),new(s())(w().inputOutput,"global",new(a().SFBool)(!0)),new(s())(w().inputOutput,"on",new(a().SFBool)(!0)),new(s())(w().inputOutput,"color",new(a().SFColor)(1,1,1)),new(s())(w().inputOutput,"intensity",new(a().SFFloat)(1)),new(s())(w().inputOutput,"ambientIntensity",new(a().SFFloat)),new(s())(w().inputOutput,"location",new(a().SFVec3f)),new(s())(w().inputOutput,"direction",new(a().SFVec3f)(0,0,1)),new(s())(w().inputOutput,"upVector",new(a().SFVec3f)(0,0,1)),new(s())(w().inputOutput,"fieldOfView",new(a().SFFloat)(.785398)),new(s())(w().inputOutput,"nearDistance",new(a().SFFloat)(-1)),new(s())(w().inputOutput,"farDistance",new(a().SFFloat)(-1)),new(s())(w().outputOnly,"aspectRatio",new(a().SFFloat)),new(s())(w().inputOutput,"texture",new(a().SFNode)),new(s())(w().inputOutput,"shadows",new(a().SFBool)),new(s())(w().inputOutput,"shadowColor",new(a().SFColor)),new(s())(w().inputOutput,"shadowIntensity",new(a().SFFloat)(1)),new(s())(w().inputOutput,"shadowBias",new(a().SFFloat)(.005)),new(s())(w().initializeOnly,"shadowMapSize",new(a().SFInt32)(1024))]),enumerable:!0}});const I=A,C=P().add("TextureProjector",I),Y=R()(B);function B(){this.projectionMatrix=new(S()),this.modelViewMatrix=new(N())(S()),this.modelMatrix=new(S()),this.invTextureSpaceMatrix=new(S()),this.location=new(_()),this.locationArray=new Float32Array(3),this.invTextureSpaceProjectionMatrix=new(S()),this.direction=new(_()),this.rotation=new(O()),this.matrix=new(S()),this.matrixArray=new Float32Array(16),this.textureMatrix=new(S())}function L(t){V.call(this,t),this.addType(w().TextureProjectorParallel),this._fieldOfView.setUnit("length")}Object.assign(B.prototype,{set(t,e,i){this.browser=t.getBrowser(),this.lightNode=t,this.global=t.getGlobal(),this.modelViewMatrix.push(i),this.textureMatrix.assign(t.getTexture().getMatrix())},renderShadowMap(t){const e=this.lightNode,i=t.getCameraSpaceMatrixArray(),r=this.modelMatrix.assign(this.modelViewMatrix.get()).multRight(i),n=this.invTextureSpaceMatrix.assign(this.global?r:S().Identity);this.rotation.setFromToVec(_().zAxis,this.direction.assign(e.getDirection()).negate()),e.straightenHorizon(this.rotation),n.translate(e.getLocation()),n.rotate(this.rotation),n.inverse();const a=e.getTexture().getWidth()/e.getTexture().getHeight(),o=e.getMinimumX(),s=e.getMaximumX(),u=e.getMinimumY(),h=e.getMaximumY(),c=e.getSizeX(),l=e.getSizeY(),x=e.getNearDistance(),p=e.getFarDistance();if(a>c/l){const t=(o+s)/2,e=l*a/2;b().ortho(t-e,t+e,u,h,x,p,this.projectionMatrix)}else{const t=(u+h)/2,e=c/a/2;b().ortho(o,s,t-e,t+e,x,p,this.projectionMatrix)}this.global||n.multLeft(r.inverse()),this.invTextureSpaceProjectionMatrix.assign(n).multRight(this.projectionMatrix).multRight(e.getBiasMatrix()).multRight(this.textureMatrix),this.modelViewMatrix.get().multVecMatrix(this.location.assign(e._location.getValue())),this.locationArray.set(this.location)},setGlobalVariables(t){this.matrix.assign(t.getView()?.inverse??S().Identity).multRight(t.getCameraSpaceMatrixArray()).multRight(this.invTextureSpaceProjectionMatrix),this.matrixArray.set(this.matrix)},setShaderUniforms(t,e,i){const r=e.numTextureProjectors++,n=this.lightNode,a=n.getTexture(),o=this.global?this.textureUnit=this.textureUnit??this.browser.popTexture2DUnit():this.browser.getTexture2DUnit();if(t.activeTexture(t.TEXTURE0+o),t.bindTexture(t.TEXTURE_2D,a.getTexture()),t.uniform1i(e.x3d_TextureProjectorTexture[r],o),e.hasTextureProjector(r,this))return;const s=n.getNearParameter(),u=n.getFarParameter();t.uniform3f(e.x3d_TextureProjectorColor[r],...n.getColor()),t.uniform1f(e.x3d_TextureProjectorIntensity[r],n.getIntensity()),t.uniform3fv(e.x3d_TextureProjectorLocation[r],this.locationArray),t.uniform3f(e.x3d_TextureProjectorParams[r],s,u,a.isLinear()),t.uniformMatrix4fv(e.x3d_TextureProjectorMatrix[r],!1,this.matrixArray)},dispose(){this.browser.pushTexture2DUnit(this.textureUnit),this.modelViewMatrix.clear(),this.textureUnit=void 0,Y.push(this)}}),Object.assign(Object.setPrototypeOf(L.prototype,V.prototype),{initialize(){V.prototype.initialize.call(this),this._fieldOfView.addInterest("set_fieldOfView___",this),this.set_fieldOfView___()},set_fieldOfView___(){this.minimumX=this._fieldOfView[0],this.minimumY=this._fieldOfView[1],this.maximumX=this._fieldOfView[2],this.maximumY=this._fieldOfView[3],this.sizeX=this.maximumX-this.minimumX,this.sizeY=this.maximumY-this.minimumY},getMinimumX(){return this.minimumX},getMinimumY(){return this.minimumY},getMaximumX(){return this.maximumX},getMaximumY(){return this.maximumY},getSizeX(){return this.sizeX},getSizeY(){return this.sizeY},getLights:()=>Y}),Object.defineProperties(L,{...l().getStaticProperties("TextureProjectorParallel","TextureProjection",2,"children","4.0"),fieldDefinitions:{value:new(h())([new(s())(w().inputOutput,"metadata",new(a().SFNode)),new(s())(w().inputOutput,"description",new(a().SFString)),new(s())(w().inputOutput,"global",new(a().SFBool)(!0)),new(s())(w().inputOutput,"on",new(a().SFBool)(!0)),new(s())(w().inputOutput,"color",new(a().SFColor)(1,1,1)),new(s())(w().inputOutput,"intensity",new(a().SFFloat)(1)),new(s())(w().inputOutput,"ambientIntensity",new(a().SFFloat)),new(s())(w().inputOutput,"location",new(a().SFVec3f)),new(s())(w().inputOutput,"direction",new(a().SFVec3f)(0,0,1)),new(s())(w().inputOutput,"upVector",new(a().SFVec3f)(0,0,1)),new(s())(w().inputOutput,"fieldOfView",new(a().SFVec4f)(-1,-1,1,1)),new(s())(w().inputOutput,"nearDistance",new(a().SFFloat)(-1)),new(s())(w().inputOutput,"farDistance",new(a().SFFloat)(-1)),new(s())(w().outputOnly,"aspectRatio",new(a().SFFloat)),new(s())(w().inputOutput,"texture",new(a().SFNode)),new(s())(w().inputOutput,"shadows",new(a().SFBool)),new(s())(w().inputOutput,"shadowColor",new(a().SFColor)),new(s())(w().inputOutput,"shadowIntensity",new(a().SFFloat)(1)),new(s())(w().inputOutput,"shadowBias",new(a().SFFloat)(.005)),new(s())(w().initializeOnly,"shadowMapSize",new(a().SFInt32)(1024))]),enumerable:!0}});const E=L,H=P().add("TextureProjectorParallel",E);r().add({name:"TextureProjection",concreteNodes:[C,H],abstractNodes:[V]});P().add("TextureProjectionComponent",undefined)})();